name: Security Scan (Bandit + pip-audit)

on:
    pull_request:

    schedule:
        - cron: '0 1 * * *'  # Runs at 1 AM every day.

    workflow_dispatch:

concurrency:
    group: security-scan-${{ github.ref }}
    cancel-in-progress: true

env:
  PYTHON_VERSION_FILE: .python-version
  # Security: Prevent script injection
  ACTIONS_RUNNER_DEBUG: false
  ACTIONS_STEP_DEBUG: false

permissions:
    contents: read          # Needed for actions/checkout
    security-events: write  # Needed to upload SARIF to GitHub Code Scanning
    pull-requests: write    # Needed to comment on PRs

jobs:
    bandit:
        name: Security Scan with Bandit
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            
            -   name: Set up Python
                uses: actions/setup-python@v5
                with:
                    python-version-file: ${{ env.PYTHON_VERSION_FILE}}
            
            -   name: Restore uv Cache
                uses: actions/cache@v4
                with:
                    path: /tmp/.uv-cache
                    key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                    restore-keys: |
                        uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                        uv-${{ runner.os }}-

            -   name: Install uv (cached)
                uses: astral-sh/setup-uv@v6
                with:
                    enable-cache: true
                    
            -   name: Install dependencies (frozen)
                run: uv sync --dev --locked
                
            -   name: Ensure reports dir
                # python -c "import os; os.makedirs('reports', exist_ok=True)" for cross-platform compatibility  (cross-platform)
                run: mkdir -p reports
                    
            -   name: Run Bandit Security Scan (medium severity + JSON)
                run: uv run bandit -f json -l medium -o reports/bandit_report.json

            -   name: Run Bandit Security Scan (high severity + HTML)
                run: uv run bandit -f html -l all -o reports/bandit_report.html || true

            -   name: Run Bandit Security Scan (sarif)
                run: uv run bandit -f sarif -l all -o reports/bandit_report.sarif

            -   name: Upload Bandit Report
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: bandit-reports
                    path: reports/
            
            -   name: Upload Bandit SARIF Report
                if: always()
                uses: github/codeql-action/upload-sarif@v3
                with:
                    sarif_file: reports/bandit_report.sarif

    pip-audit:
        name: Dependency Vulnerability Scan with Pip-Audit
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            
            -   name: Set up Python
                uses: actions/setup-python@v5
                with:
                    python-version-file: ${{ env.PYTHON_VERSION_FILE}}
            
            -   name: Restore uv Cache
                uses: actions/cache@v4
                with:
                    path: /tmp/.uv-cache
                    key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                    restore-keys: |
                        uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                        uv-${{ runner.os }}-

            -   name: Install uv (cached)
                uses: astral-sh/setup-uv@v6
                with:
                    enable-cache: true
                    
            -   name: Install dependencies (frozen)
                run: uv sync --dev --locked

            -   name: Ensure reports dir
                run: mkdir -p reports
                    
            -   name: Run pip-audit Dependency Vulnerability Scan with json output
                run: uv run pip-audit -f json -o reports/pip-audit.json

            -   name: Upload pip-audit Report
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: pip-audit-report
                    path: reports/

    pr-comment:
      name: PR Security Results
      runs-on: ubuntu-latest
      needs: [bandit, pip-audit]
      if: github.event_name == 'pull_request'
      steps:
        - name: Post PR Comment
          uses: actions/github-script@v7
          with:
            script: |
              const bandit = "${{ needs.bandit.result }}";
              const pipAudit = "${{ needs.pip-audit.result }}";
            
              const results = `
              ## üîê Security Scan Results
            
              | Tool       | Result |
              |-----------|--------|
              | Bandit    | ${bandit === "success" ? "‚úÖ Passed" : "‚ùå Issues Found"} |
              | pip-audit | ${pipAudit === "success" ? "‚úÖ Passed" : "‚ùå Issues Found"} |
            
              ${ (bandit === "success" && pipAudit === "success")
                ? "‚úÖ All security checks passed!"
                : "‚ùå Some issues found. Check workflow artifacts." }
              `;
            
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: results
              });
