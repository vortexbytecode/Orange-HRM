name: PR Quality Checks (Ruff + pip-audit)

on:
    pull_request:

concurrency:
    group: 'pr-checks-${{ github.ref }}'
    cancel-in-progress: true

env:
  PYTHON_VERSION_FILE: .python-version
  # Security: Prevent script injection
  ACTIONS_RUNNER_DEBUG: false
  ACTIONS_STEP_DEBUG: false

permissions:
  contents: read            # Allows read-only access to repo contents (list commits, read files)
  issues: write             # Allows write access to issues (create, update, comment)
  pull-requests: write      # Allows write access to pull requests (create, update, comment)
  checks: write             # Needed if the workflow creates or updates check runs (the ‚Äúchecks‚Äù UI ‚Äî annotations, statuses).

jobs:
    ruff:
        name: Code Quality & Formatting
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            
            -   name: Set up Python
                uses: actions/setup-python@v5
                with:
                    python-version-file: ${{ env.PYTHON_VERSION_FILE }}
            
            -   name: Restore uv Cache
                uses: actions/cache@v4
                with:
                    path: /tmp/.uv-cache
                    key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                    restore-keys: |
                        uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                        uv-${{ runner.os }}-

            -   name: Install uv (cached)
                uses: astral-sh/setup-uv@v6
                with:
                    enable-cache: true
                    
            -   name: Install dependencies (frozen)
                run: uv sync --dev --locked

            -   name: Lint Code Quality with Ruff
                run: uv run ruff check

            -   name: Check Code Formatting with Ruff (show diffs)
                run: uv run ruff format --check --diff


    mypy:
        name: Static Type Checking with MyPy
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0
            
            -   name: Set up Python
                uses: actions/setup-python@v5
                with:
                    python-version-file: ${{ env.PYTHON_VERSION_FILE}}
            
            -   name: Restore uv Cache
                uses: actions/cache@v4
                with:
                    path: /tmp/.uv-cache
                    key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                    restore-keys: |
                        uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
                        uv-${{ runner.os }}-

            -   name: Install uv (cached)
                uses: astral-sh/setup-uv@v6
                with:
                    enable-cache: true
                    
            -   name: Install dependencies (frozen)
                run: uv sync --dev --locked

            -   name: Ensure reports dir
                # python -c "import os; os.makedirs('reports', exist_ok=True)" for cross-platform compatibility  (cross-platform)
                run: mkdir -p reports
                
            -   name: Run MyPy Static Type Check
                run: uv run mypy src --strict --pretty --cobertura-xml-report=reports/

            -   name: Upload MyPy XML Report
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: mypy-xml-report
                    path: reports/

    pr-comment:
      name: Post Quality Results to PR
      runs-on: ubuntu-latest
      needs: [ruff, mypy]
      if: always()
      steps:
        - name: Comment on PR
          uses: actions/github-script@v7
          with:
            script: |
              const ruff = "${{ needs.ruff.result }}";
              const mypy = "${{ needs.mypy.result }}";

              const results = `
              ## üßπ PR Quality Checks

              | Tool  | Result |
              |-------|--------|
              | Ruff  | ${ruff === "success" ? "‚úÖ Passed" : "‚ùå Failed"} |
              | MyPy  | ${mypy === "success" ? "‚úÖ Passed" : "‚ùå Failed"} |

              ${ (ruff === "success" && mypy === "success")
                ? "‚úÖ All quality checks passed!"
                : "‚ùå Some checks failed. Please review the logs." }
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: results
              });
