[project]
name = "orange-hrm"
version = "0.1.0"
description = "Enterprise-grade UI automation testing framework using Selenium and pytest"
readme = "README.md"
authors = [
    { name = "Bijo", email = "next.wavecode@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "pytest>=8.4.1",
    "selenium>=4.35.0",
]

[dependency-groups]
dev = [
    "bandit[toml]>=1.8.6",
    "lxml>=6.0.1",
    "mypy>=1.18.1",
    "pip-audit>=2.9.0",
    "pre-commit>=4.3.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.12",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
package = true

# ==== Ruff configuration ====
[tool.ruff]
src = ["src", "tests"]
line-length = 120
indent-width = 4
target-version = "py313"

# Paths provided to include must match files. For example, include = ["src"] will fail since it matches a directory.
include = ["*.py", "pyproject.toml"]
extend-include = [
    "src/**/*.py",           # All Python files in src/
    "tests/**/*.py",         # All test files
    "tests/conftest.py",     # Pytest configuration
]

# Exclude directories that shouldn't be linted (matches your structure)
exclude = [
    # Standard cache/build excludes
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg",
    ".ipynb_checkpoints", ".mypy_cache", ".nox", ".pants.d", 
    ".pyenv", ".pytest_cache", ".pytype", ".ruff_cache", ".svn",
    ".tox", ".venv", ".vscode", "__pycache__", "__pypackages__", 
    "_build", "buck-out", "build", "dist", "node_modules", "site-packages", "venv",
    
    # Your project specific directories
    "reports/",              # Test reports
    "drivers/",              # WebDriver binaries
    "docs/",                 # Documentation
    ".github/",              # GitHub workflows
    "allure-results/",       # Allure test results
    "allure-report/",        # Allure reports
    "logs/",                 # Log files
    "screenshots/",          # Test screenshots
    
    # Configuration and data files (not Python code)
    ".env", ".env.example", ".gitignore", ".python-version", 
    ".coverage", ".trufflehog_exclude_globs.txt",
    "README.md", "CHANGELOG.md", "LICENSE", "pytest.ini",
    "uv.lock",
]

# Per-file ignores for different parts of your project structure
[tool.ruff.lint.per-file-ignores]
# Test files can be more lenient
"tests/**/*.py" = [
    "S101",    # Use of assert (essential in tests)
    "PLR2004", # Magic values in comparisons
    "ANN",     # Type annotations not required in tests
    "D",       # Docstrings not required in tests  
    "FBT",     # Boolean arguments fine in tests
    "ARG001",  # Unused arguments (pytest fixtures)
    "PLR0913", # Too many arguments
    "PT011",   # pytest.raises should specify expected exception
]
# conftest.py files have their own patterns
"tests/conftest.py" = [
    "ANN",     # Type annotations not required
    "D",       # Docstrings not required
    "ARG001",  # Unused function arguments (fixtures)
]
# Page objects might have many methods
"src/orange_hrm/pages/*.py" = [
    "PLR0904", # Too many public methods (page objects need many methods)
    "PLR0913", # Too many arguments (locators, wait times, etc.)
]
# Config modules can have different patterns
"src/orange_hrm/config/*.py" = [
    "ARG001",  # Unused function arguments
    "PLR2004", # Magic values in config are OK
]
# Constants can have different patterns  
"src/orange_hrm/constants/*.py" = [
    "PLR2004", # Magic values are expected in constants
]
# Utils and helpers might have unused arguments for interface compliance
"**/utils/*.py" = [
    "ARG001",  # Unused function arguments
]

[tool.ruff.lint]
exclude = ["*.ipynb"]
select = [
    # Error prevention
    "F",      # Pyflakes
    "E", "W", # pycodestyle
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "C4",     # flake8-comprehensions
    "PIE",    # flake8-pie
    "PERF",   # Perflint (performance)
    "FURB",   # refurb (modernize code)
    "RUF",    # Ruff-specific rules
    
    # Code organization
    "I",      # isort (import sorting)
    "UP",     # pyupgrade (modernize syntax)
    "ICN",    # flake8-import-conventions
    "TC",     # flake8-type-checking
    
    # Code quality
    "N",      # pep8-naming
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "RET",    # flake8-return
    "SLF",    # flake8-self
    
    # Testing specific
    "PT",     # flake8-pytest-style
    
    # Documentation
    "D",      # pydocstyle
    
    # Type hints
    "ANN",    # flake8-annotations
    
    # Security and best practices
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "TRY",    # tryceratops (exception handling)
    "EM",     # flake8-errmsg
    "G",      # flake8-logging-format
    "T20",    # flake8-print
    
    # Async code
    "ASYNC",  # flake8-async
    
    # String handling
    "ISC",    # flake8-implicit-str-concat
    "RSE",    # flake8-raise
    
    # Date/time
    "DTZ",    # flake8-datetimez
    
    # Pylint rules
    "PL",     # Pylint
]
# Rules to ignore (balanced for automation testing projects)
ignore = [
    # Docstring requirements (too strict for test automation)
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    
    # Type annotation requirements (gradually adopt)
    "ANN001", "ANN002", "ANN003", "ANN101", "ANN102", "ANN201", "ANN202", "ANN204",
    
    # Boolean arguments (common in test automation)
    "FBT001", "FBT002", "FBT003",
    
    # Complexity limits (reasonable for automation)
    "PLR0913", # Too many arguments 
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLR0904", # Too many public methods
    
    # Security rules too strict for tests
    "S101",    # Use of assert (needed in tests)
    "S105", "S106", "S107", # Hardcoded passwords (test data)
    "S602",    # subprocess without shell=False
    
    # Formatting conflicts (handled by formatter)
    "E501",    # Line too long
    "COM812",  # Missing trailing comma
    "ISC001",  # Implicitly concatenated string literals
    
    # Docstring style conflicts (choose one style)
    "D203",    # 1 blank line required before class docstring  
    "D213",    # Multi-line docstring summary should start at second line
]
# Allow auto-fixing for most rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "numpy"  # Accepts: "google", "numpy", or "pep257".

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true
docstring-code-line-length = 72
indent-style = "space"
skip-magic-trailing-comma = false


# ===== BANDIT SECURITY CONFIGURATION =====
[tool.bandit]
exclude_dirs = [
    ".venv", ".env", ".git", "__pycache__", ".github", 
    "reports", ".vscode", "docs", ".coverage", ".mypy_cache", 
    ".pytest_cache", ".ruff_cache", "drivers"
]
skips = ["B101"]  # Skip assert_used test


# ===== MYPY CONFIGURATION =====
[tool.mypy]
# Perfect for your src/ layout structure
mypy_path = "src"
packages = ["orange_hrm"]
python_version = "3.13"
plugins = ["pydantic.mypy"]
